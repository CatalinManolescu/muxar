 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;


namespace Muxar.BrightStarDb.Models 
{
    public partial class MyEntityContext : BrightstarEntityContext {
    	
    	static MyEntityContext() 
    	{
            InitializeEntityMappingStore();
        }
        
        /// <summary>
        /// Initialize the internal cache of entity attribute information.
        /// </summary>
        /// <remarks>
        /// This method is normally invoked from the static constructor for the generated context class.
        /// It is provided as a public static method to enable the use of the cached entity attribute 
        /// information without the need to construct a context (typically in test code). 
        /// In normal application code you should never need to explicitly call this method.
        /// </remarks>
        public static void InitializeEntityMappingStore()
        {
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Muxar.BrightStarDb.Models.IAlbum));
    		EntityMappingStore.Instance.SetImplMapping<Muxar.BrightStarDb.Models.IAlbum, Muxar.BrightStarDb.Models.Album>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Muxar.BrightStarDb.Models.IArtist));
    		EntityMappingStore.Instance.SetImplMapping<Muxar.BrightStarDb.Models.IArtist, Muxar.BrightStarDb.Models.Artist>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Muxar.BrightStarDb.Models.IMember));
    		EntityMappingStore.Instance.SetImplMapping<Muxar.BrightStarDb.Models.IMember, Muxar.BrightStarDb.Models.Member>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Muxar.BrightStarDb.Models.IPlaylist));
    		EntityMappingStore.Instance.SetImplMapping<Muxar.BrightStarDb.Models.IPlaylist, Muxar.BrightStarDb.Models.Playlist>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Muxar.BrightStarDb.Models.ISong));
    		EntityMappingStore.Instance.SetImplMapping<Muxar.BrightStarDb.Models.ISong, Muxar.BrightStarDb.Models.Song>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Muxar.BrightStarDb.Models.IUser));
    		EntityMappingStore.Instance.SetImplMapping<Muxar.BrightStarDb.Models.IUser, Muxar.BrightStarDb.Models.User>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public MyEntityContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public MyEntityContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public MyEntityContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		Albums = 	new BrightstarEntitySet<Muxar.BrightStarDb.Models.IAlbum>(this);
    		Artists = 	new BrightstarEntitySet<Muxar.BrightStarDb.Models.IArtist>(this);
    		Members = 	new BrightstarEntitySet<Muxar.BrightStarDb.Models.IMember>(this);
    		Playlists = 	new BrightstarEntitySet<Muxar.BrightStarDb.Models.IPlaylist>(this);
    		Songs = 	new BrightstarEntitySet<Muxar.BrightStarDb.Models.ISong>(this);
    		Users = 	new BrightstarEntitySet<Muxar.BrightStarDb.Models.IUser>(this);
    	}
    	
    	public IEntitySet<Muxar.BrightStarDb.Models.IAlbum> Albums
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Muxar.BrightStarDb.Models.IArtist> Artists
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Muxar.BrightStarDb.Models.IMember> Members
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Muxar.BrightStarDb.Models.IPlaylist> Playlists
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Muxar.BrightStarDb.Models.ISong> Songs
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Muxar.BrightStarDb.Models.IUser> Users
    	{
    		get; private set;
    	}
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(Muxar.BrightStarDb.Models.IAlbum))) {
                return (IEntitySet<T>)this.Albums;
            }
            if (typeof(T).Equals(typeof(Muxar.BrightStarDb.Models.IArtist))) {
                return (IEntitySet<T>)this.Artists;
            }
            if (typeof(T).Equals(typeof(Muxar.BrightStarDb.Models.IMember))) {
                return (IEntitySet<T>)this.Members;
            }
            if (typeof(T).Equals(typeof(Muxar.BrightStarDb.Models.IPlaylist))) {
                return (IEntitySet<T>)this.Playlists;
            }
            if (typeof(T).Equals(typeof(Muxar.BrightStarDb.Models.ISong))) {
                return (IEntitySet<T>)this.Songs;
            }
            if (typeof(T).Equals(typeof(Muxar.BrightStarDb.Models.IUser))) {
                return (IEntitySet<T>)this.Users;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
        } // end class MyEntityContext
        
}
namespace Muxar.BrightStarDb.Models 
{
    
    public partial class Album : BrightstarEntityObject, IAlbum 
    {
    	public Album(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Album(BrightstarEntityContext context) : base(context, typeof(Album)) { }
    	public Album() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Muxar.BrightStarDb.Models.IAlbum
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.DateTime ReleaseDate
    	{
            		get { return GetRelatedProperty<System.DateTime>("ReleaseDate"); }
            		set { SetRelatedProperty("ReleaseDate", value); }
    	}
    
    	public System.String CoverUri
    	{
            		get { return GetRelatedProperty<System.String>("CoverUri"); }
            		set { SetRelatedProperty("CoverUri", value); }
    	}
    
    	public Muxar.BrightStarDb.Models.IArtist Artist
    	{
            get { return GetRelatedObject<Muxar.BrightStarDb.Models.IArtist>("Artist"); }
            set { SetRelatedObject<Muxar.BrightStarDb.Models.IArtist>("Artist", value); }
    	}
    	public System.Collections.Generic.ICollection<Muxar.BrightStarDb.Models.ISong> Songs
    	{
    		get { return GetRelatedObjects<Muxar.BrightStarDb.Models.ISong>("Songs"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Songs", value); }
    								}
    	#endregion
    }
}
namespace Muxar.BrightStarDb.Models 
{
    
    public partial class Artist : BrightstarEntityObject, IArtist 
    {
    	public Artist(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Artist(BrightstarEntityContext context) : base(context, typeof(Artist)) { }
    	public Artist() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Muxar.BrightStarDb.Models.IArtist
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	public System.Collections.Generic.ICollection<Muxar.BrightStarDb.Models.IMember> Members
    	{
    		get { return GetRelatedObjects<Muxar.BrightStarDb.Models.IMember>("Members"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Members", value); }
    								}
    
    	public System.DateTime FoundedIn
    	{
            		get { return GetRelatedProperty<System.DateTime>("FoundedIn"); }
            		set { SetRelatedProperty("FoundedIn", value); }
    	}
    	public System.Collections.Generic.ICollection<Muxar.BrightStarDb.Models.IAlbum> Albums
    	{
    		get { return GetRelatedObjects<Muxar.BrightStarDb.Models.IAlbum>("Albums"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Albums", value); }
    								}
    	#endregion
    }
}
namespace Muxar.BrightStarDb.Models 
{
    
    public partial class Member : BrightstarEntityObject, IMember 
    {
    	public Member(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Member(BrightstarEntityContext context) : base(context, typeof(Member)) { }
    	public Member() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Muxar.BrightStarDb.Models.IMember
    
    	public System.String FirstName
    	{
            		get { return GetRelatedProperty<System.String>("FirstName"); }
            		set { SetRelatedProperty("FirstName", value); }
    	}
    
    	public System.String LastName
    	{
            		get { return GetRelatedProperty<System.String>("LastName"); }
            		set { SetRelatedProperty("LastName", value); }
    	}
    
    	public System.String StageName
    	{
            		get { return GetRelatedProperty<System.String>("StageName"); }
            		set { SetRelatedProperty("StageName", value); }
    	}
    
    	public System.String Gender
    	{
            		get { return GetRelatedProperty<System.String>("Gender"); }
            		set { SetRelatedProperty("Gender", value); }
    	}
    
    	public Muxar.BrightStarDb.Models.IArtist Artist
    	{
            get { return GetRelatedObject<Muxar.BrightStarDb.Models.IArtist>("Artist"); }
            set { SetRelatedObject<Muxar.BrightStarDb.Models.IArtist>("Artist", value); }
    	}
    	#endregion
    }
}
namespace Muxar.BrightStarDb.Models 
{
    
    public partial class Playlist : BrightstarEntityObject, IPlaylist 
    {
    	public Playlist(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Playlist(BrightstarEntityContext context) : base(context, typeof(Playlist)) { }
    	public Playlist() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Muxar.BrightStarDb.Models.IPlaylist
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public Muxar.BrightStarDb.Models.IUser Author
    	{
            get { return GetRelatedObject<Muxar.BrightStarDb.Models.IUser>("Author"); }
            set { SetRelatedObject<Muxar.BrightStarDb.Models.IUser>("Author", value); }
    	}
    	public System.Collections.Generic.ICollection<Muxar.BrightStarDb.Models.ISong> Songs
    	{
    		get { return GetRelatedObjects<Muxar.BrightStarDb.Models.ISong>("Songs"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Songs", value); }
    								}
    	#endregion
    }
}
namespace Muxar.BrightStarDb.Models 
{
    
    public partial class Song : BrightstarEntityObject, ISong 
    {
    	public Song(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Song(BrightstarEntityContext context) : base(context, typeof(Song)) { }
    	public Song() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Muxar.BrightStarDb.Models.ISong
    
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public Muxar.BrightStarDb.Models.IArtist Artist
    	{
            get { return GetRelatedObject<Muxar.BrightStarDb.Models.IArtist>("Artist"); }
            set { SetRelatedObject<Muxar.BrightStarDb.Models.IArtist>("Artist", value); }
    	}
    	public System.Collections.Generic.ICollection<Muxar.BrightStarDb.Models.IPlaylist> Playlists
    	{
    		get { return GetRelatedObjects<Muxar.BrightStarDb.Models.IPlaylist>("Playlists"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Playlists", value); }
    								}
    
    	public Muxar.BrightStarDb.Models.IAlbum Album
    	{
            get { return GetRelatedObject<Muxar.BrightStarDb.Models.IAlbum>("Album"); }
            set { SetRelatedObject<Muxar.BrightStarDb.Models.IAlbum>("Album", value); }
    	}
    
    	public System.String Thumbnail
    	{
            		get { return GetRelatedProperty<System.String>("Thumbnail"); }
            		set { SetRelatedProperty("Thumbnail", value); }
    	}
    	#endregion
    }
}
namespace Muxar.BrightStarDb.Models 
{
    
    public partial class User : BrightstarEntityObject, IUser 
    {
    	public User(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public User(BrightstarEntityContext context) : base(context, typeof(User)) { }
    	public User() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Muxar.BrightStarDb.Models.IUser
    
    	public System.String FirstName
    	{
            		get { return GetRelatedProperty<System.String>("FirstName"); }
            		set { SetRelatedProperty("FirstName", value); }
    	}
    
    	public System.String LastName
    	{
            		get { return GetRelatedProperty<System.String>("LastName"); }
            		set { SetRelatedProperty("LastName", value); }
    	}
    
    	public System.String Email
    	{
            		get { return GetRelatedProperty<System.String>("Email"); }
            		set { SetRelatedProperty("Email", value); }
    	}
    
    	public System.String Gender
    	{
            		get { return GetRelatedProperty<System.String>("Gender"); }
            		set { SetRelatedProperty("Gender", value); }
    	}
    
    	public System.String Country
    	{
            		get { return GetRelatedProperty<System.String>("Country"); }
            		set { SetRelatedProperty("Country", value); }
    	}
    	public System.Collections.Generic.ICollection<Muxar.BrightStarDb.Models.IPlaylist> Playlists
    	{
    		get { return GetRelatedObjects<Muxar.BrightStarDb.Models.IPlaylist>("Playlists"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Playlists", value); }
    								}
    	#endregion
    }
}
